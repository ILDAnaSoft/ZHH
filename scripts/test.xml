<?xml version="1.0" encoding="us-ascii"?>
    <marlin xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://ilcsoft.desy.de/marlin/marlin.xsd">

    <constants>
        <constant name="lcgeo_DIR" value="/cvmfs/sw.hsf.org/key4hep/releases/2024-03-10/x86_64-centos7-gcc12.2.0-opt/k4geo/0.20-e42drs/share/k4geo" />
        <constant name="DetectorModel" value="ILD_l5_o1_v02" />
        <constant name="CompactFile" value="${lcgeo_DIR}/ILD/compact/${DetectorModel}/${DetectorModel}.xml" />
        <constant name="OutputDirectory" value="." />
        <constant name="OutputBaseName" value="test" />
        <constant name="OutputRootFile" value="${OutputBaseName}.root" />

        <constant name="MCParticleCollectionName" value="MCParticlesSkimmed" />
        <constant name="ECM" value="500."/>
        <constant name="Verbosity" value="SILENT"/>
    </constants>

    <execute>
        <processor name="InitDD4hep" />
        <processor name="MyAIDAProcessor" />
        <processor name="MyAddNeutralPFOCovMatLite" />

        <processor name="MyThrust" />

        <processor name="MyLCIOOutputProcessor"/>
    </execute>

    <global>
        <parameter name="LCIOInputFiles">
            /pnfs/desy.de/ilc/prod/ilc/mc-2020/ild/dst-merged/500-TDR_ws/hh/ILD_l5_o1_v02/v02-02-03/00015739/000/rv02-02-03.sv02-02-03.mILD_l5_o1_v02.E500-TDR_ws.I403001.Pe2e2hh.eL.pR.n000.d_dstm_15739_0.slcio
            <!--
            /pnfs/desy.de/ilc/prod/ilc/ild/copy/dst-merged/500-TDR_ws/2f_Z_hadronic/ILD_l5_o1_v02/v02-00-01/rv02-00-01.sv02-00-01.mILD_l5_o1_v02.E500-TDR_ws.I250114.P2f_z_h.eL.pR.n001.d_dstm_10410_1.slcio
            /pnfs/desy.de/ilc/prod/ilc/ild/copy/dst-merged/500-TDR_ws/6f_vvWW/ILD_l5_o1_v02/v02-00-01/rv02-00-01.sv02-00-01.mILD_l5_o1_v02.E500-TDR_ws.I108596.Pvvveev.eL.pR.n001.d_dstm_10354_0.slcio
            /pnfs/desy.de/ilc/prod/ilc/ild/copy/dst-merged/500-TDR_ws/6f_ttbar/ILD_l5_o1_v02/v02-00-01/rv02-00-01.sv02-00-01.mILD_l5_o1_v02.E500-TDR_ws.I108677.Pyyuyyu.eL.pR.n007.d_dstm_10433_15.slcio
            -->
        </parameter>
        <!-- limit the number of processed records (run+evt): -->
        <!--parameter name="MaxRecordNumber" value="0" /to process all events--> 
        <!--parameter name="MaxRecordNumber" value="1000" /to process 1000 events--> 
        <parameter name="MaxRecordNumber" value="100"/>
        <parameter name="SkipNEvents" value="0" />
        <parameter name="SupressCheck" value="false" />
        <parameter name="Verbosity" options="DEBUG0-4,MESSAGE0-4,WARNING0-4,ERROR0-4,SILENT">SILENT</parameter>
        <parameter name="RandomSeed" value="1234567890" />
        <parameter name="OutputSteeringFile" value="" />
        <parameter name="AllowToModifyEvent" value="true" />
        <!-- optionally limit the collections that are read from the input file: -->
        <!--parameter name="LCIOReadCollectionNames">MCParticle PandoraPFOs</parameter-->
    </global>

    <processor name="InitDD4hep" type="InitializeDD4hep">
        <!--InitializeDD4hep reads a compact xml file and initializes the DD4hep::LCDD object-->
        <!--Name of the DD4hep compact xml file to load-->
        <parameter name="DD4hepXMLFile" type="string">${CompactFile}</parameter>
        <parameter name="Verbosity" type="string">SILENT</parameter>
    </processor>

    <processor name="MyAIDAProcessor" type="AIDAProcessor">
        <!--Processor that handles AIDA files. Creates on directory per processor.  Processors only need to create and fill the histograms,clouds and tuples. Needs to be the first ActiveProcessor-->
        <!-- compression of output file 0: false >0: true (default) -->
        <parameter name="Compress" type="int">1</parameter>
        <!-- filename without extension-->
        <parameter name="FileName" type="string">${OutputDirectory}/${OutputBaseName}_AIDA</parameter>
        <!-- type of output file root (default) or xml )-->
        <parameter name="FileType" type="string">root</parameter>
        <!--verbosity level of this processor ("DEBUG0-4,MESSAGE0-4,WARNING0-4,ERROR0-4,SILENT")-->
        <!--parameter name="Verbosity" type="string">DEBUG </parameter-->
    </processor>

    <processor name="MyAddNeutralPFOCovMatLite" type="AddNeutralPFOCovMat">
        <!--Name of the Input PFO Collection-->
        <parameter name="inputPfoCollection" type="string" lcioInType="RECONSTRUCTEDPARTICLE">PandoraPFOs</parameter>
        <!--Names of the Output PFO collection-->
        <parameter name="outputPfoCollection" type="string" lcioOutType="RECONSTRUCTEDPARTICLE">PandoraPFO_updatedNeutralPFOs</parameter>
        <!--true: Neutral PFOs are taken massive, false: Neutral PFOs are taken massless-->
        <parameter name="AssumeNeutralPFOMassive" type="bool">true</parameter>
        <!--true: the cluster energy is interpreted as kinetic energy of PFO, false: the cluster energy is interpreted as momentum magnitude of PFO-->
        <parameter name="isClusterEnergyKinEnergy" type="bool">false</parameter>
        <!--true: Update 4-momentum of PFOs, false: set 4-momentum for PFOs same as input PFO-->
        <parameter name="updatePFO4Momentum" type="bool">false</parameter>
        <!--true: Use (mathematically) true Jacobian for the option E_cluster = |p|, false: for the option E_cluster = |p|, Use the same jacobian as the option E_cluster = E_kinetic-->
        <parameter name="useTrueJacobian" type="bool">false</parameter>
        <!--verbosity level of this processor ("DEBUG0-4,MESSAGE0-4,WARNING0-4,ERROR0-4,SILENT")-->
        <parameter name="Verbosity" type="string">SILENT</parameter>
    </processor>

    <processor name="MyThrust" type="ThrustReconstruction">
        <!--Calculates thrust axis and thrust value of event using different algorithms-->  <!--Name of collection of reconstructed particles used for thrust reconstruction-->
        <parameter name="inputCollectionName" type="string" lcioInType="ReconstructedParticle"> PandoraPFOs </parameter>
        <!--parameter name="inputCollectionName" type="string" lcioInType="ReconstructedParticle"> PandoraPFOsNew </parameter-->
        <!--Type of thrust reconstruction algorithm to be used:  1 : Tasso algorithm  2 : JetSet algorithm-->
        <parameter name="typeOfThrustFinder" type="int"> 2 </parameter>
        <parameter name="Verbosity" type="string">SILENT</parameter>
    </processor>

    <processor name="MyLCIOOutputProcessor" type="LCIOOutputProcessor">
        <!--Writes the current event to the specified LCIO outputfile. Needs to be the last ActiveProcessor.-->
        <!--drops the named collections from the event-->
        <parameter name="DropCollectionNames" type="StringVec"> BuildUpVertex BuildUpVertex_RP BuildUpVertex_V0 BuildUpVertex_V0_RP GammaGammaCandidateEtaPrimes GammaGammaCandidateEtas GammaGammaCandidatePi0s MCTruthMarlinTrkTracksLink MCTruthClusterLink MarlinTrkTracks MarlinTrkTracksKaon MarlinTrkTracksMCTruthLink MarlinTrkTracksProton PFOsWithoutOverlay PandoraClusters PandoraPFO_updatedNeutralPFOs PrimaryVertex PrimaryVertex_RP RefinedJets_rel RefinedJets_vtx RefinedJets_vtx_RP RefinedVertex_RP V0RecoParticles V0Vertices VertexJets DistilledPFOs GammaGammaParticles DurhamJetsPFOs Durham_2JetsPFOs </parameter>
        <!--drops all collections of the given type from the event-->
        <!--parameter name="DropCollectionTypes" type="StringVec">SimTrackerHit SimCalorimeterHit  </parameter-->
        <!-- write complete objects in subset collections to the file (i.e. ignore subset flag)-->
        <!--parameter name="FullSubsetCollections" type="StringVec">${MCParticleCollectionName}</parameter-->
        <!--force keep of the named collections - overrules DropCollectionTypes (and DropCollectionNames)-->
        <parameter name="KeepCollectionNames" type="StringVec"> PandoraPFOs </parameter>
        <!-- name of output file -->
        <parameter name="LCIOOutputFile" type="string">${OutputDirectory}/${OutputBaseName}.slcio</parameter>
        <!--write mode for output file:  WRITE_APPEND or WRITE_NEW-->
        <parameter name="LCIOWriteMode" type="string">WRITE_NEW</parameter>
        <!--will split output file if size in kB exceeds given value - doesn't work with APPEND and NEW-->
        <!--parameter name="SplitFileSizekB" type="int">1992294 </parameter-->
        <!--verbosity level of this processor ("DEBUG0-4,MESSAGE0-4,WARNING0-4,ERROR0-4,SILENT")-->
        <parameter name="Verbosity" type="string">DEBUG</parameter>
    </processor>
</marlin>
